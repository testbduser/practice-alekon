@page "/two-week"
@inject WeatherService WeatherService

<h3>Выберите город</h3>
<select @onchange="ChangeCity">
    @foreach (string city in Cities)
    {
        <option value="@city">@city</option>
    }
</select>

<h3>Погода на следующие 14 дней в @SelectedCity</h3>

<table class="two-week-table">
    <tr>
        <th>Дата</th>
        <th>Макс. температура</th>
        <th>Мин. температура</th>
        <th>Описание</th>
        <th>Осадки</th>
        <th>Влажность</th>
        <th>Скорость ветра</th>
    </tr>
    @if (WeatherRecords != null)
    {
        @foreach (var day in WeatherRecords.Take(14))
        {
            <tr>
                <td>@day.Date.ToShortDateString()</td>
                <td>@day.MaxTemperature °C</td>
                <td>@day.MinTemperature °C</td>
                <td>@day.Description</td>
                <td>@day.Precipitation mm</td>
                <td>@day.Humidity %</td>
                <td>@day.WindSpeed km/h</td>
            </tr>
        }
    }
</table>

@code {
    private List<WeatherRecord> WeatherRecords { get; set; }
    private List<string> Cities { get; set; }
    private string SelectedCity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cities = await WeatherService.GetCities();
        SelectedCity = Cities.FirstOrDefault(); // Установка первого города в списке по умолчанию
        await UpdateWeather();
    }

    private async Task UpdateWeather()
    {
        WeatherRecords = await WeatherService.GetWeatherForecast(SelectedCity, 14);
    }

    private async Task ChangeCity(ChangeEventArgs e)
    {
        SelectedCity = e.Value.ToString();
        await UpdateWeather();
    }
}
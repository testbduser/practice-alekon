@page "/two-week"
@inject WeatherService WeatherService
@using ClosedXML.Excel;
@using System.IO

<h3>Выберите город</h3>
<select @onchange="ChangeCity">
    @foreach (string city in Cities)
    {
        <option value="@city">@city</option>
    }
</select>

<h3>Погода на следующие 14 дней в @SelectedCity</h3>

<button class="export-button" @onclick="ExportToExcel">Экспорт в Excel</button>
<table class="two-week-table">
    <tr>
        <th>Дата</th>
        <th>Макс. температура</th>
        <th>Мин. температура</th>
        <th>Описание</th>
        <th>Осадки</th>
        <th>Влажность</th>
        <th>Скорость ветра</th>
    </tr>
    @if (WeatherRecords != null)
    {
        @foreach (var day in WeatherRecords.Take(14))
        {
            <tr>
                <td>@day.Date.ToShortDateString()</td>
                <td>@day.MaxTemperature °C</td>
                <td>@day.MinTemperature °C</td>
                <td>@day.Description</td>
                <td>@day.Precipitation mm</td>
                <td>@day.Humidity %</td>
                <td>@day.WindSpeed km/h</td>
            </tr>
        }
    }
</table>

@code {
    private List<WeatherRecord> WeatherRecords { get; set; }
    private List<string> Cities { get; set; }
    private string SelectedCity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cities = await WeatherService.GetCities();
        SelectedCity = Cities.FirstOrDefault(); // Установка первого города в списке по умолчанию
        await UpdateWeather();
    }

    private async Task UpdateWeather()
    {
        WeatherRecords = await WeatherService.GetWeatherForecast(SelectedCity, 14);
    }

    private async Task ChangeCity(ChangeEventArgs e)
    {
        SelectedCity = e.Value.ToString();
        await UpdateWeather();
    }

    private async Task ExportToExcel()
    {
        // Проверка наличия данных о погоде
        if (WeatherRecords == null || WeatherRecords.Count == 0)
        {
            return;
        }

        try
        {
            // Создание нового документа Excel
            using (var workbook = new XLWorkbook())
            {
                var worksheet = workbook.Worksheets.Add("Погода на 14 дней");

                // Заголовки столбцов
                worksheet.Cell(1, 1).Value = "Дата";
                worksheet.Cell(1, 2).Value = "Макс. температура";
                worksheet.Cell(1, 3).Value = "Мин. температура";
                worksheet.Cell(1, 4).Value = "Описание";
                worksheet.Cell(1, 5).Value = "Осадки";
                worksheet.Cell(1, 6).Value = "Влажность";
                worksheet.Cell(1, 7).Value = "Скорость ветра";

                // Данные о погоде на 14 дней
                for (int i = 0; i < WeatherRecords.Count && i < 14; i++)
                {
                    var day = WeatherRecords[i];
                    int row = i + 2;

                    worksheet.Cell(row, 1).Value = day.Date.ToShortDateString();
                    worksheet.Cell(row, 2).Value = day.MaxTemperature;
                    worksheet.Cell(row, 3).Value = day.MinTemperature;
                    worksheet.Cell(row, 4).Value = day.Description;
                    worksheet.Cell(row, 5).Value = day.Precipitation;
                    worksheet.Cell(row, 6).Value = day.Humidity;
                    worksheet.Cell(row, 7).Value = day.WindSpeed;
                }

                // Сохранение файла Excel
                var fileName = $"{SelectedCity}_погода_14_дней.xlsx";
                var filePath = Path.Combine(@"E:\работы305\prALEKON\pr4c#\pr4-private-sait\pr4-private-sait\wwwroot\import", fileName); // Замените "Путь_к_директории" на вашу желаемую директорию

                workbook.SaveAs(filePath);

                // Вывод сообщения об успешном экспорте
                Console.WriteLine($"Файл Excel успешно экспортирован: {filePath}");
            }
        }
        catch (Exception ex)
        {
            // Обработка ошибки при экспорте
            Console.WriteLine($"Ошибка при экспорте в Excel: {ex.Message}");
        }
    }
}